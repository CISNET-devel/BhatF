	WRITE(8,1001) F00,(EU0(I),I=1,NPAR)
	WRITE(9,1001) (SU0(I),I=1,NPAR)
	CALL SYSTEM('gnuplot mcmc.gnu &')

C --- start revised chain ------------------------------------------------------------

        DO N=1,MC

C --- random visitation to preserve reversability

        DO K=1,NPAR
         SQ(K)=RAN2(ISEED)
        ENDDO
        CALL ORDER(NPAR,SQ,ISQ,JSQ)

	DO II=1,NPAR

        I=JSQ(II)
	D=2.4*DSQRT(W(I))  !using s.e
	DH=D/2.

        ACC_P=0.d0
	
 	EU(I)=RANDGS(ISEED,EU0(I),D)
c 	EU(I)=EU0(I)-DH+RAN2(ISEED)*D !proposal

c ---   check for exclusions (necessary, because of exceeding max, or
c       below min of prior support in eigenspace, but NOT sufficient))
c
c ---   note that this acceptance rate does not include rejections due to
c       boundaries
 
        IF(EU(I).LE.E1(I)) GOTO 14 !these are rejected as prior is zero
        IF(EU(I).GE.E2(I)) GOTO 14
		
C ---  invert relationship S^{-1}

	DO K=1,NPAR
	 SU(K)=0.D0
	 DO L=1,NPAR
	  SU(K)=SU(K)+EU(L)*S(k,l)
         ENDDO

C ***  check bounds

c 	IF(SU(K).LE.S1(K)) PRINT*,'proposal <:',k,su(k),s1(k)
c 	IF(SU(K).GE.S2(K)) PRINT*,'proposal >:',k,su(k),s2(k)
c 	if(su0(k).ne.tu0(k)) print*,'check:',su0(k),tu0(k)

	ENDDO

c --- explicitly checking for boundary problems

	DO K=1,NPAR
	 IF(SU(K).LE.S1(K)) goto 14
	 IF(SU(K).GE.S2(K)) goto 14
	ENDDO

c ---   get likelihood or energy 

	IERR=0
	CALL FUNC(SU,NPAR,FP)
	NCT=NCT+1

c --- boundary checks from within func

        IF(IERR.EQ.1) GOTO 14 !checks on positivity problems

C ---	R ratio 

        ACC_P=MIN(1.D0,DEXP((-FP+F0)*beta))
 14	IF(ACC_P.EQ.1.D0) THEN

	DO K=1,NPAR
	 SU0(K)=SU(K)
	ENDDO

	 EU0(I)=EU(I)
         F0=FP
	 n_accepted(i)=n_accepted(i)+1

	ELSE
	 UD01=RAN2(ISEED)
	 IF(UD01.LE.ACC_P) THEN

	DO K=1,NPAR
	 SU0(K)=SU(K)
	ENDDO

	  EU0(I)=EU(I)
          F0=FP
	  n_accepted(i)=n_accepted(i)+1

	  ELSE
	DO K=1,NPAR
	 SU(K)=SU0(K)
	ENDDO
	  EU(I)=EU0(I) !reset to previous value
	  FP=F0
	 ENDIF
	ENDIF

c --- update the best likelihood estimate (ble)

        IF(ACC_P.EQ.1.) THEN
        IF(FP.LT.F_MIN) THEN
           DO J=1,NPAR
           SU0_MC(J)=SU0(J)
           ENDDO
           F_MIN=FP
        ENDIF
        ENDIF

c ---------------------------------------------

	ENDDO

        if(mod(n,100).eq.0) then

	DO I=1,NPAR
	A(I)=N_ACCEPTED(I)
	if(a(i).lt.25. and. n.le.500) w(i)=.25*w(i) !balancing acceptance rates
	if(a(i).gt.75. and. n.le.500) w(i)= 4.*w(i) !balancing acceptance rates
	N_ACCEPTED(I)=0  !resetting the acceptance counter to zero
	ENDDO
        WRITE(6,1007) N,FP,(SU0(I),I=1,NPAR)
	WRITE(6,1008) (A(I),I=1,NPAR)
        endif
	
	if(mod(n,mth).eq.0) then
	WRITE(8,1001) FP,(EU0(I),I=1,NPAR)
	WRITE(9,1001) (SU0(I),I=1,NPAR)
	endif

	ENDDO



